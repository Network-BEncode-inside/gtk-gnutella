?RCS: $Id$
?RCS:
?RCS: @COPYRIGHT@
?RCS:
?MAKE:sqliteconfig sqlitecflags sqliteldflags d_sqlite: awk cat Myread Setvar
?MAKE:	-pick add $@ %<
?S:d_sqlite:
?S: This variable determines if HAS_SQLITE will be defined.
?S:.
?S:sqliteconfig:
?S:	This variable holds the command to use to grab information
?S:	about SQLite.
?S: Typically something "pkg-config sqlite".
?S:.
?S:sqlitecflags:
?S:	This variable holds the compiler flags required to compile with SQLite.
?S:.
?S:sqliteldflags:
?S:	This variable holds the linker flags required to link against SQLite.
?S:.
?C:HAS_SQLITE:
?C: This symbol is defined when SQLite is present
?C:.
?H:#$d_sqlite HAS_SQLITE  /**/
?H:.
?T:version vint
?LINT: set d_sqlite
: how can we find information about SQLite?
echo " "

val="$undef"
sqlitecflags=""
sqliteldflags=""
sqliteconfig='false'

case "$d_sqlite" in
"$undef") ;;
*)
	echo "Checking how we can gather information about SQLite..." >&4
	if pkg-config sqlite3 --cflags >/dev/null 2>&1; then
		sqliteconfig="pkg-config sqlite3"
	elif pkg-config sqlite --cflags >/dev/null 2>&1; then
		sqliteconfig="pkg-config sqlite"
	else
		echo "You've don't seem to have SQLite installed?" >&4
	fi
	echo "(I'll use '$sqliteconfig' to gather that information.)"

	version=`$sqliteconfig --modversion`
	case "$version" in
	'') ;;
	*)
		vint=`echo $version | $awk -F. '{print $1 * 10000 + $2 * 100 + $3;}'`
		if test 0$vint -lt 030300; then
			echo "Sorry, you have SQLite $version, I need at least 3.3.0." >&4
			$cat <<'EOM'

For more information, see http://www.sqlite.org/.
EOM
		else
			val="$define"
			sqlitecflags=`$sqliteconfig --cflags`
			sqliteldflags=`$sqliteconfig --libs`
			echo "Good, you have SQLite $version."
		fi
	esac
	;;
esac

set d_sqlite
eval $setvar

