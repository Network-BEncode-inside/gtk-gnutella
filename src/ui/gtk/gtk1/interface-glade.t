/*
 * Translatable strings file generated by Glade.
 * Add this file to your project's POTFILES.in.
 * DO NOT compile it as part of your application.
 */

gchar *s = N_("gtk-gnutella");
gchar *s = N_("_File");
gchar *s = N_("_Preferences");
gchar *s = N_("_Quit");
gchar *s = N_("_View");
gchar *s = N_("show Search_bar");
gchar *s = N_("show _Sidebar");
gchar *s = N_("show _Menubar");
gchar *s = N_("show _Statusbar");
gchar *s = N_("Connection counters");
gchar *s = N_("show _Downloads");
gchar *s = N_("show _Uploads");
gchar *s = N_("show _Connections");
gchar *s = N_("_HTTP traffic stats");
gchar *s = N_("show HTTP _incoming traffic");
gchar *s = N_("show HTTP _outgoing traffic");
gchar *s = N_("_Gnutella traffic stats");
gchar *s = N_("show Gnet _incoming traffic");
gchar *s = N_("show Gnet _outgoing traffic");
gchar *s = N_("Gnutella _leaf traffic stats");
gchar *s = N_("_auto-hide leaf traffic stats");
gchar *s = N_("show leaf _incoming traffic");
gchar *s = N_("show leaf _outgoing traffic");
gchar *s = N_("_Help");
gchar *s = N_("_About");
gchar *s = N_("Frequently Asked Questions");
gchar *s = N_("_FAQ");
gchar *s = N_("Search");
gchar *s = N_("A passive search matches any search results routed through this node");
gchar *s = N_("_Passive");
gchar *s = N_("Search");
gchar *s = N_("Hits");
gchar *s = N_("New");
gchar *s = N_("Gnet connections");
gchar *s = N_("%v/%u Gnet nodes");
gchar *s = N_("uploads");
gchar *s = N_("%v/%u uploads");
gchar *s = N_("downloads");
gchar *s = N_("%v/%u downloads");
gchar *s = N_("HTTP traffic");
gchar *s = N_("Click to toggle display.");
gchar *s = N_("in");
gchar *s = N_("Click to toggle display.");
gchar *s = N_("out");
gchar *s = N_("GnutellaNet traffic");
gchar *s = N_("in");
gchar *s = N_("out");
gchar *s = N_("Leaf traffic");
gchar *s = N_("in");
gchar *s = N_("out");
gchar *s = N_("Host");
gchar *s = N_("Loc");
gchar *s = N_("Flags");
gchar *s = N_("User-Agent");
gchar *s = N_("Ver");
gchar *s = N_("Connected time");
gchar *s = N_("Uptime");
gchar *s = N_("Info");
gchar *s = N_("Disconnect from selected nodes");
gchar *s = N_("Disconnect");
gchar *s = N_("Try to connect to specified address");
gchar *s = N_("Add");
gchar *s = N_("Minimum");
gchar *s = N_("Maximum");
gchar *s = N_("Ultrapeers in leaf mode");
gchar *s = N_("Quick-connect pool size");
gchar *s = N_("Transferred data");
gchar *s = N_("Uploaded:");
gchar *s = N_("Downloaded:");
gchar *s = N_("Somebody tell me a sensible tooltip for this.");
gchar *s = N_("Somebody tell me a sensible tooltip for this.");
gchar *s = N_("Chunks/Files:");
gchar *s = N_("Volume:");
gchar *s = N_("Local node");
gchar *s = N_("GUID:");
gchar *s = N_("IP:Port:");
gchar *s = N_("The current IP address and listening port for this node. To change these go to File->Preferences->Network.");
gchar *s = N_("Network");
gchar *s = N_("Current search:");
gchar *s = N_("Cl_ose search");
gchar *s = N_("(no search)");
gchar *s = N_("label794");
gchar *s = N_("label795");
gchar *s = N_("Information about selected file");
gchar *s = N_("XML Metadata");
gchar *s = N_("_Hide downloaded files");
gchar *s = N_("_Remove manually downloaded files");
gchar *s = N_("Copy browse-host results to passive searches");
gchar *s = N_("Discard results without SHA-1 hashes");
gchar *s = N_("Discard spam");
gchar *s = N_("Case-sensitive sorting");
gchar *s = N_("Max. _number of results");
gchar *s = N_("Max. number of browse host results");
gchar *s = N_("Ignored files are");
gchar *s = N_("General search settings (affect all searches)");
gchar *s = N_("Re_try search every");
gchar *s = N_("secs   ");
gchar *s = N_("_Download selected");
gchar *s = N_("_Edit filters");
gchar *s = N_("Expand all");
gchar *s = N_("Collapse all");
gchar *s = N_("Clear results");
gchar *s = N_("Searches");
gchar *s = N_("File");
gchar *s = N_("Size");
gchar *s = N_("Done");
gchar *s = N_("Uploaded");
gchar *s = N_("Sources");
gchar *s = N_("Status");
gchar *s = N_("Filename filter:");
gchar *s = N_("case-sensitive");
gchar *s = N_("Progress:");
gchar *s = N_("Shows visual information on the download progress. Green chunks have been downloaded, with the brighter green chunks touched during this session. Yellow chunks are active right now; these active chunks are also marked with a triangle. Red chunks have not been downloaded yet. The blue line indicates which parts of the file have been seen on the network in this session.");
gchar *s = N_("Details");
gchar *s = N_("Aliases");
gchar *s = N_("Never send a push request");
gchar *s = N_("Delete file on abort");
gchar *s = N_("Remove file on mismatch");
gchar *s = N_("Bytes to back off on mismatch");
gchar *s = N_("Max. downloads from single host");
gchar *s = N_("Max. simultaneous downloads");
gchar *s = N_("Max. simultaneous downloads per file");
gchar *s = N_("Auto clear stopped downloads");
gchar *s = N_("Finished");
gchar *s = N_("Completed");
gchar *s = N_("Failed");
gchar *s = N_("Unavailable");
gchar *s = N_("Settings");
gchar *s = N_("_Purge selected");
gchar *s = N_("[all count]");
gchar *s = N_(" registered, ");
gchar *s = N_("[with source count]");
gchar *s = N_(" with sources");
gchar *s = N_("All");
gchar *s = N_("Filename");
gchar *s = N_("Host");
gchar *s = N_("Loc");
gchar *s = N_("Size");
gchar *s = N_("Range");
gchar *s = N_("Server");
gchar *s = N_("Progress");
gchar *s = N_("Status");
gchar *s = N_("Abort all selected downloads");
gchar *s = N_("_Abort selected");
gchar *s = N_("Resume all selected downloads");
gchar *s = N_("_Resume selected");
gchar *s = N_("Clear completed, failed and unavailable downloads from list");
gchar *s = N_("Clear stopped");
gchar *s = N_("[running]");
gchar *s = N_("(");
gchar *s = N_("active");
gchar *s = N_(", ");
gchar *s = N_("queued");
gchar *s = N_(")");
gchar *s = N_("Active");
gchar *s = N_("Filename");
gchar *s = N_("Host");
gchar *s = N_("Loc");
gchar *s = N_("Size");
gchar *s = N_("Server");
gchar *s = N_("Status");
gchar *s = N_("Select");
gchar *s = N_("case-sensitive");
gchar *s = N_("Freeze queue");
gchar *s = N_("Thaw queue");
gchar *s = N_("[queued downloads]");
gchar *s = N_(" queued (");
gchar *s = N_("[hosts alive]");
gchar *s = N_(" alive with ");
gchar *s = N_("queued");
gchar *s = N_(" passive)");
gchar *s = N_("Queue");
gchar *s = N_("Downloads");
gchar *s = N_("Filename");
gchar *s = N_("Host");
gchar *s = N_("Loc");
gchar *s = N_("Size");
gchar *s = N_("Range");
gchar *s = N_("User-Agent");
gchar *s = N_("Progress");
gchar *s = N_("Status");
gchar *s = N_("Abort and remove all selected uploads");
gchar *s = N_(" Kill selected ");
gchar *s = N_("Clear already completed uploads from list");
gchar *s = N_(" Clear completed ");
gchar *s = N_("Auto clear completed uploads");
gchar *s = N_("Auto clear failed uploads");
gchar *s = N_("Max. simultaneous uploads");
gchar *s = N_("Max. uploads to a single host");
gchar *s = N_("Uploads");
gchar *s = N_("Type");
gchar *s = N_("Count");
gchar *s = N_("Reason");
gchar *s = N_("Count");
gchar *s = N_("_General");
gchar *s = N_("Type");
gchar *s = N_("0");
gchar *s = N_("1");
gchar *s = N_("2");
gchar *s = N_("3");
gchar *s = N_("4");
gchar *s = N_("5");
gchar *s = N_("6");
gchar *s = N_("7");
gchar *s = N_("8+");
gchar *s = N_("FC/_TTL");
gchar *s = N_("Type");
gchar *s = N_("0");
gchar *s = N_("1");
gchar *s = N_("2");
gchar *s = N_("3");
gchar *s = N_("4");
gchar *s = N_("5");
gchar *s = N_("6");
gchar *s = N_("7");
gchar *s = N_("8+");
gchar *s = N_("FC/_hops");
gchar *s = N_("Type");
gchar *s = N_("Received");
gchar *s = N_("Expired");
gchar *s = N_("Dropped");
gchar *s = N_("Queued");
gchar *s = N_("Relayed");
gchar *s = N_("Gen. queued");
gchar *s = N_("Gen. sent");
gchar *s = N_("_Messages");
gchar *s = N_("Hops");
gchar *s = N_("Nodes");
gchar *s = N_("Files");
gchar *s = N_("Size");
gchar *s = N_("_Horizon");
gchar *s = N_("Show _bytes");
gchar *s = N_("Show _percentages");
gchar *s = N_("_Include headers");
gchar *s = N_("Show pr_otocol:");
gchar *s = N_("Show r_easons for");
gchar *s = N_("Statistics");
gchar *s = N_("Search _monitor enabled");
gchar *s = N_("Show _last");
gchar *s = N_("searches");
gchar *s = N_("Search");
gchar *s = N_("Search Monitor");
gchar *s = N_("Filename");
gchar *s = N_("Size");
gchar *s = N_("Attempts");
gchar *s = N_("Complete");
gchar *s = N_("Normalized");
gchar *s = N_("Somebody tell me a sensible tooltip for this.");
gchar *s = N_("Clear non-existent files");
gchar *s = N_("Clear all");
gchar *s = N_("Fully served ");
gchar *s = N_("[BH HTML served]");
gchar *s = N_(" / ");
gchar *s = N_("[BH HTML]");
gchar *s = N_(" HTML and ");
gchar *s = N_("[BH qhits served]");
gchar *s = N_(" / ");
gchar *s = N_("[BH qhits]");
gchar *s = N_(" Gnutella browse requests");
gchar *s = N_("Upload History");
gchar *s = N_("Cache");
gchar *s = N_("Hosts");
gchar *s = N_("Hits");
gchar *s = N_("Misses");
gchar *s = N_("Hostcache capacity");
gchar *s = N_("%v/%u (%P%%)");
gchar *s = N_("Regular hosts");
gchar *s = N_("Clear");
gchar *s = N_("%v/%u (%P%%)");
gchar *s = N_("Ultrapeers");
gchar *s = N_("Clear");
gchar *s = N_("%v/%u (%P%%)");
gchar *s = N_("Bad hosts");
gchar *s = N_("Clear");
gchar *s = N_("Hostcache");
gchar *s = N_("_Update interval (sec)");
gchar *s = N_("_Deletion coeff. (0-100)");
gchar *s = N_("Search Term");
gchar *s = N_("This Interval");
gchar *s = N_("Total");
gchar *s = N_("_Reset stats");
gchar *s = N_("0 terms counted");
gchar *s = N_("Search Stats");
gchar *s = N_("You seem to be offline.");
gchar *s = N_("Nodes");
gchar *s = N_("Files");
gchar *s = N_("Size");
gchar *s = N_("Your uploads are stalling at an abnormal rate, indicating that your bandwidth is probably saturated. You should not run as an ultra node, and try to reduce the allocated bandwidth to gtk-gnutella to avoid saturating both your incoming and outgoing paths.");
gchar *s = N_("Your uploads are stalling at an abnormal rate, indicating that your bandwidth is probably saturated. You should not run as an ultra node, and try to reduce the allocated bandwidth to gtk-gnutella to avoid saturating both your incoming and outgoing paths.");
gchar *s = N_("You appear to be firewalled, both TCP-wise and UDP-wise. You will not see any push results, which may prevent you from seeing a large amount of results. You will not be able to send queries requesting out-of-band delivery of query hits.");
gchar *s = N_("You appear to be firewalled, both TCP-wise and UDP-wise. You will not see any push results, which may prevent you from seeing a large amount of results. You will not be able to send queries requesting out-of-band delivery of query hits. However, it is possible to punch a hole into the UDP firewall, so you will be able to send out-of-band query hits.");
gchar *s = N_("You appear to be TCP-firewalled, i.e. others cannot connect to you to download files. You will not see push results, which may prevent you from seeing a large amount of results.");
gchar *s = N_("You appear to be UDP-firewalled, i.e. you cannot receive unsolicited traffic via UDP. You will not be able to send queries requesting out-of-band delivery of query hits.");
gchar *s = N_("People can connect to you via TCP, but you are UDP-firewalled.  However, you can punch a hole into that firewall, allowing reception of replies to your UDP packets.  You will be able to send out-of-band query hits, but you won't be able to receive any.");
gchar *s = N_("People can connect to you, using both TCP and UDP. Push should work and you will be able to receive out-of-band results for your queries.");
gchar *s = N_("Running in leaf mode.");
gchar *s = N_("Running in legacy mode. Consider switching to auto mode.");
gchar *s = N_("Running in ultrapeer mode.");
gchar *s = N_("Uptime");
gchar *s = N_("Abort");
gchar *s = N_("Abort all...");
gchar *s = N_("with the same name");
gchar *s = N_("with the same urn:sha1");
gchar *s = N_("from the same host");
gchar *s = N_("Remove file");
gchar *s = N_("Resume");
gchar *s = N_("Move back to queue");
gchar *s = N_("Force push mode");
gchar *s = N_("Copy URL to clipboard");
gchar *s = N_("Connect to host");
gchar *s = N_("Expand all");
gchar *s = N_("Collapse all");
gchar *s = N_("Browse Host");
gchar *s = N_("Start now");
gchar *s = N_("Abort");
gchar *s = N_("Abort all...");
gchar *s = N_("with the same name");
gchar *s = N_("with the same urn:sha1");
gchar *s = N_("from the same host");
gchar *s = N_("Copy URL to clipboard");
gchar *s = N_("Connect to host");
gchar *s = N_("Expand all");
gchar *s = N_("Collapse all");
gchar *s = N_("Browse Host");
gchar *s = N_("_Edit filters");
gchar *s = N_("Drop results...");
gchar *s = N_("Adds \"don't display\" rules matching the selected files names to the search filter.");
gchar *s = N_("with the same name");
gchar *s = N_("Adds \"don't display\" rules matching the selected files urn:sha1 to the search filter.");
gchar *s = N_("with the same urn:sha1");
gchar *s = N_("from the same host");
gchar *s = N_("Globally drop results...");
gchar *s = N_("Adds \"don't display\" rules matching the selected files names to the global pre-filter.");
gchar *s = N_("with the same name");
gchar *s = N_("Adds \"don't display\" rules matching the selected files urn:sha1 to the global pre-filter.");
gchar *s = N_("with the same urn:sha1");
gchar *s = N_("from the same host");
gchar *s = N_("Expand all");
gchar *s = N_("Collapse all");
gchar *s = N_("Stop this search");
gchar *s = N_("Resume this search");
gchar *s = N_("Restart this search");
gchar *s = N_("Duplicate this search");
gchar *s = N_("Show tabs");
gchar *s = N_("Configure columns");
gchar *s = N_("Make current sorting default");
gchar *s = N_("Bitzi Metadata");
gchar *s = N_("Browse Host");
gchar *s = N_("Add as search");
gchar *s = N_("Disconnect");
gchar *s = N_("Browse Host");
gchar *s = N_("Configure columns");
gchar *s = N_("Browse Host");
gchar *s = N_("Ruleset editor");
gchar *s = N_("_Create filter");
gchar *s = N_("Filter");
gchar *s = N_("Rules");
gchar *s = N_("Match");
gchar *s = N_("Filter");
gchar *s = N_("enabled");
gchar *s = N_("A filter cannot be removed if it is bound to a search or if it is in use (used as a target in a rule).");
gchar *s = N_("Remove filter");
gchar *s = N_("!");
gchar *s = N_("Condition");
gchar *s = N_("Target");
gchar *s = N_("Match");
gchar *s = N_("Remove all rules\n"
              "from this filter");
gchar *s = N_("Reset all rule stats\n"
              "in this filter");
gchar *s = N_("Reset filter stats\n"
              "for this filter");
gchar *s = N_("Reset filter stats\n"
              "for all filters");
gchar *s = N_("Add name rule");
gchar *s = N_("Add size rule");
gchar *s = N_("Add flag rule");
gchar *s = N_("Add jump rule");
gchar *s = N_("Add IP rule");
gchar *s = N_("Add state rule");
gchar *s = N_("[Add/Remove]");
gchar *s = N_("Flags");
gchar *s = N_("invert condition");
gchar *s = N_("active");
gchar *s = N_("mark only");
gchar *s = N_("Condition: If filename matches");
gchar *s = N_("case sensitive");
gchar *s = N_("Target");
gchar *s = N_("Save");
gchar *s = N_("Remove");
gchar *s = N_("Abort");
gchar *s = N_("_Reset stats");
gchar *s = N_("[Filename]");
gchar *s = N_("Flags");
gchar *s = N_("invert condition");
gchar *s = N_("active");
gchar *s = N_("mark only");
gchar *s = N_("Condition: If IP address matches");
gchar *s = N_("IP address/mask");
gchar *s = N_("Target");
gchar *s = N_("Save");
gchar *s = N_("Remove");
gchar *s = N_("Abort");
gchar *s = N_("_Reset stats");
gchar *s = N_("[IP address]");
gchar *s = N_("Flags");
gchar *s = N_("invert condition");
gchar *s = N_("active");
gchar *s = N_("mark only");
gchar *s = N_("Condition: If file size matches");
gchar *s = N_("Minimum size:");
gchar *s = N_("Maximum size:");
gchar *s = N_("bytes");
gchar *s = N_("bytes");
gchar *s = N_("Target");
gchar *s = N_("Save");
gchar *s = N_("Remove");
gchar *s = N_("Abort");
gchar *s = N_("_Reset stats");
gchar *s = N_("[Filesize]");
gchar *s = N_("Flags");
gchar *s = N_("active");
gchar *s = N_("Condition: always");
gchar *s = N_("There is no condition. When this rule is reached, the matching will continue in the specified target filter. That's also why you can't invert this condition. If you could, this rule would just be ignored.");
gchar *s = N_("Target");
gchar *s = N_("Save");
gchar *s = N_("Remove");
gchar *s = N_("Abort");
gchar *s = N_("_Reset stats");
gchar *s = N_("[Jump]");
gchar *s = N_("Flags");
gchar *s = N_("invert condition");
gchar *s = N_("active");
gchar *s = N_("mark only");
gchar *s = N_("Condition: If urn:sha1 matches");
gchar *s = N_("SHA1 hash (not editable, add from search popup)");
gchar *s = N_("Originally obtained from");
gchar *s = N_("Target");
gchar *s = N_("Save");
gchar *s = N_("Remove");
gchar *s = N_("Abort");
gchar *s = N_("_Reset stats");
gchar *s = N_("[SHA1]");
gchar *s = N_("Flags");
gchar *s = N_("active");
gchar *s = N_("mark only");
gchar *s = N_("Condition: If result has flags");
gchar *s = N_("Busy");
gchar *s = N_("Push");
gchar *s = N_("unset");
gchar *s = N_("ignored");
gchar *s = N_("ignored");
gchar *s = N_("unset");
gchar *s = N_("set");
gchar *s = N_("set");
gchar *s = N_("Stable");
gchar *s = N_("set");
gchar *s = N_("unset");
gchar *s = N_("ignored");
gchar *s = N_("Target");
gchar *s = N_("Save");
gchar *s = N_("Remove");
gchar *s = N_("Abort");
gchar *s = N_("_Reset stats");
gchar *s = N_("[Flags]");
gchar *s = N_("Flags");
gchar *s = N_("invert condition");
gchar *s = N_("active");
gchar *s = N_("mark only");
gchar *s = N_("Condition: If current filter result properties match");
gchar *s = N_("DOWNLOAD");
gchar *s = N_("don't");
gchar *s = N_("undefined");
gchar *s = N_("DISPLAY");
gchar *s = N_("do");
gchar *s = N_("do");
gchar *s = N_("don't");
gchar *s = N_("undefined");
gchar *s = N_("ignore");
gchar *s = N_("ignore");
gchar *s = N_("Target");
gchar *s = N_("Save");
gchar *s = N_("Remove");
gchar *s = N_("Abort");
gchar *s = N_("_Reset stats");
gchar *s = N_("[State]");
gchar *s = N_("Apply");
gchar *s = N_("Revert");
gchar *s = N_("Ok");
gchar *s = N_("Cancel");
gchar *s = N_("gtk-gnutella shutdown");
gchar *s = N_("Gtk-Gnutella is shutting down.\n"
              "Sending bye messages to peers.\n"
              "\n"
              "Grace time remaining:");
gchar *s = N_("[time]");
gchar *s = N_("About gtk-gnutella");
gchar *s = N_("[name and version]");
gchar *s = N_("$Id$");
gchar *s = N_("Original author:");
gchar *s = N_("Core development:");
gchar *s = N_("PARQ development:");
gchar *s = N_("Project leader:");
gchar *s = N_("GUI development:");
gchar *s = N_("Swarming development:");
gchar *s = N_("Vidar Madsen");
gchar *s = N_("Richard Eckart");
gchar *s = N_("Raphael Manfredi");
gchar *s = N_("Yann Grossel");
gchar *s = N_("Raphael Manfredi");
gchar *s = N_("Jeroen Asselman");
gchar *s = N_("Contributors:");
gchar *s = N_("==> We are looking for people who want to contribute to this fine tool. <==");
gchar *s = N_("Visit http://gtk-gnutella.sourceforge.net/.");
gchar *s = N_("Join the users or developers mailing lists.");
gchar *s = N_("Meet us on #gtk-gnutella at irc.freenode.net.");
gchar *s = N_("This product includes GeoIP data created by MaxMind, available from\n"
              "http://maxmind.com/");
gchar *s = N_("Close");
gchar *s = N_("Copy rule");
gchar *s = N_("Paste rule");
gchar *s = N_("gtk-gnutella: Quit?");
gchar *s = N_("Yes");
gchar *s = N_("No, take me back!");
gchar *s = N_("Please confirm:");
gchar *s = N_("Do you really want to quit?");
gchar *s = N_("Preferences");
gchar *s = N_("Close");
gchar *s = N_("IP settings");
gchar *s = N_("Current IP settings (Address:Port):");
gchar *s = N_("not yet determined");
gchar *s = N_("_Listen port");
gchar *s = N_("Public _hostname");
gchar *s = N_("Enable _UDP");
gchar *s = N_("Network protocol:");
gchar *s = N_("(Disable: 0, Random: 1)");
gchar *s = N_("IPv4 settings");
gchar *s = N_("Force external IPv_4 address to");
gchar *s = N_("Bind to this address");
gchar *s = N_("IPv6 settings");
gchar *s = N_("Force external IPv_6 address to");
gchar *s = N_("Bind to this address");
gchar *s = N_("Use IPv6-to-IPv4 TRT prefix:");
gchar *s = N_("Proxy settings");
gchar *s = N_("H_ost:");
gchar *s = N_("TCP _Port:");
gchar *s = N_("Proxy _type:");
gchar *s = N_("Use username and password to _authenticate to proxy");
gchar *s = N_("_Username");
gchar *s = N_("Pass_word");
gchar *s = N_("Local networks");
gchar *s = N_("_Try to connect to local networks first");
gchar *s = N_("Allow connections from and to _LAN addresses");
gchar *s = N_("Local networks");
gchar *s = N_("Enter a semicolon separated list of networks that are local to you in the form of ip/bits or ip/netmask (eg 192.168.1.0/24 or 192.168.1.0/255.255.255.0)");
gchar *s = N_("Banning");
gchar *s = N_("Max. file _descriptors reserved");
gchar *s = N_("Max. _percentage of file descriptors");
gchar *s = N_("Hard limit of _file descriptors used");
gchar *s = N_("Actual amount of file descriptors used -- cannot be changed at runtime");
gchar *s = N_("Currently used");
gchar *s = N_("[place holder]");
gchar *s = N_("Use global hostiles.txt");
gchar *s = N_("Clock synchronization");
gchar *s = N_("Host runs _NTP");
gchar *s = N_("Clock skew:");
gchar *s = N_("[place holder]");
gchar *s = N_("Miscellaneous");
gchar *s = N_("Enable remote _shell control interface");
gchar *s = N_("Socket receive buffer size");
gchar *s = N_("_Gnutella RX buffer:");
gchar *s = N_("KiB");
gchar *s = N_("KiB");
gchar *s = N_("_Download RX buffer:");
gchar *s = N_("Network");
gchar *s = N_("Gnutella network mode");
gchar *s = N_("Configured peermode");
gchar *s = N_("Monitor bad node IP addresses");
gchar *s = N_("Monitor and auto-ban unstable servent types");
gchar *s = N_("Ultrapeer mode settings");
gchar *s = N_("Legacy connections");
gchar *s = N_("Maximum # of leaves");
gchar *s = N_("Ultrapeer promotion statistics");
gchar *s = N_("Last check");
gchar *s = N_("Last switch");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("Large enough uptime");
gchar *s = N_("Not firewalled");
gchar *s = N_("Enough file descriptors");
gchar *s = N_("Enough physical memory");
gchar *s = N_("Enough available bandwidth");
gchar *s = N_("IP address stability");
gchar *s = N_("Sufficient average uptime");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("Enough min # of connections");
gchar *s = N_("[place holder]");
gchar *s = N_("Enough UDP support");
gchar *s = N_("[place holder]");
gchar *s = N_("Searches");
gchar *s = N_("Limit search _results to ");
gchar *s = N_("This limits how many results gnutella returns to other people searching your files.");
gchar *s = N_("items");
gchar *s = N_("Default search _reissue timeout");
gchar *s = N_("seconds");
gchar *s = N_("Out of Band Querying");
gchar *s = N_("Queries ask for OOB results");
gchar *s = N_("Honor OOB flag in queries");
gchar *s = N_("Act as OOB proxy for leaves");
gchar *s = N_("Search queue");
gchar *s = N_("Size");
gchar *s = N_("Spacing");
gchar *s = N_("GnutellaNet timeouts (all values in seconds)");
gchar *s = N_("Connectin_g timeout");
gchar *s = N_("Connected time_out");
gchar *s = N_("T_X flow control timeout");
gchar *s = N_("Incoming connecting timeout");
gchar *s = N_("GnutellaNet TTL settings");
gchar *s = N_("Max _TTL");
gchar *s = N_("M_y TTL");
gchar *s = N_("from _nodes within a");
gchar *s = N_("Max # of _high TTL msg");
gchar *s = N_("H_ard TTL limit");
gchar *s = N_("Amount of tolerable messages above hard TTL limit per node");
gchar *s = N_("Max hard TTL limit (hop+ttl) on message");
gchar *s = N_("Hop radius for counting high TTL limit messages (#hops lower than...)");
gchar *s = N_("hops radius");
gchar *s = N_("Quality management");
gchar *s = N_("Ratio of tolerable duplicate messages per _node");
gchar *s = N_("Number of tolerable _duplicate messages per node");
gchar *s = N_("RX flow control ratio");
gchar *s = N_("_Messages");
gchar *s = N_("%");
gchar *s = N_("%");
gchar *s = N_("Watch for similar queries");
gchar *s = N_("Similar query half-life");
gchar *s = N_("Leaf requery threshold");
gchar *s = N_("Connection settings");
gchar *s = N_("%");
gchar *s = N_("%");
gchar *s = N_("Connections reserved for gtk-gnutella nodes");
gchar *s = N_("Max connections allowed per unique vendor");
gchar *s = N_("Other");
gchar *s = N_("Hops random factor");
gchar *s = N_("Clean up queries before processing");
gchar *s = N_("GnutellaNet message size limits");
gchar *s = N_("Forwarded\n"
              "message");
gchar *s = N_("Size threshold\n"
              "before kicking");
gchar *s = N_("Query");
gchar *s = N_("Query hit");
gchar *s = N_("Unknown");
gchar *s = N_("(not forwarded)");
gchar *s = N_("Maximum size\n"
              "allowed");
gchar *s = N_("GnutellaNet");
gchar *s = N_("General");
gchar *s = N_("Use _surplus bandwidth");
gchar *s = N_("Prefer _compressed connections");
gchar *s = N_("Use IP _Type of Service (TOS)");
gchar *s = N_("Available bandwidth");
gchar *s = N_("Total input bandwidth limit:");
gchar *s = N_("KiB/s");
gchar *s = N_("Total output bandwidth limit:");
gchar *s = N_("KiB/s");
gchar *s = N_("Measured HTTP latency:");
gchar *s = N_("secs");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("Bandwidth limits for GnutellaNet traffic");
gchar *s = N_("General");
gchar *s = N_("KiB/s");
gchar *s = N_("KiB/s");
gchar *s = N_("_Outgoing traffic");
gchar *s = N_("_Incoming traffic");
gchar *s = N_("Ultrapeer mode");
gchar *s = N_("KiB/s");
gchar *s = N_("KiB/s");
gchar *s = N_("Outgoing traffic to lea_ves");
gchar *s = N_("Incoming traffic from _leaves");
gchar *s = N_("Bandwidth limits for HTTP traffic");
gchar *s = N_("KiB/s");
gchar *s = N_("Cumulative _download rate");
gchar *s = N_("Cumulative _upload rate");
gchar *s = N_("Enable dynamic upload slots _allocation");
gchar *s = N_("Until the configured percentage of outgoing HTTP bandwidth is in use, open additional upload slots on request.");
gchar *s = N_("%");
gchar *s = N_("KiB/s");
gchar *s = N_("Report an upload connection _speed of");
gchar *s = N_("What other people see as your connection speed.");
gchar *s = N_("kbps to peers");
gchar *s = N_("_Compute upload connection speed");
gchar *s = N_("Bandwidth");
gchar *s = N_("Keep downloading/incomplete files in");
gchar *s = N_("_Browse");
gchar *s = N_("Move completely downloaded files to");
gchar *s = N_("_Browse");
gchar *s = N_("Move corrupted downloaded files to");
gchar *s = N_("_Browse");
gchar *s = N_("Miscellaneous");
gchar *s = N_("Convert spaces to underscores in generated filenames");
gchar *s = N_("Convert \"evil\" characters (like shell meta characters) to underscores in generated filenames");
gchar *s = N_("Apply above conversions, upon startup, to existing files in the downloading directory");
gchar *s = N_("Resume and retry");
gchar *s = N_("_Overlap when resuming");
gchar *s = N_("Maximum number of _retries");
gchar *s = N_("Maximum attempts to make, not counting HTTP busy indications");
gchar *s = N_("Amount of bytes to overlap when resuming download");
gchar *s = N_("bytes");
gchar *s = N_("Source quality");
gchar *s = N_("Optimistic first _chunk");
gchar *s = N_("Require _URN");
gchar *s = N_("Require _server name");
gchar *s = N_("Delays and timeouts (all values in seconds)");
gchar *s = N_("Retry stopped delay");
gchar *s = N_("Retry refused delay");
gchar *s = N_("Retry busy delay");
gchar *s = N_("Retry timeout delay");
gchar *s = N_("Retry timeout max");
gchar *s = N_("Retry timeout min");
gchar *s = N_("Connectin_g timeout");
gchar *s = N_("_Push sent timeout");
gchar *s = N_("Connected time_out");
gchar *s = N_("Delay in seconds to wait when running download stops");
gchar *s = N_("Delay in seconds to wait if connection is refused");
gchar *s = N_("Delay in seconds to wait after HTTP busy indication");
gchar *s = N_("Delay in seconds to wait after connection failure");
gchar *s = N_("Maximum seconds to wait on auto-retry timeouts");
gchar *s = N_("Minimum seconds to wait on auto-retry timeouts");
gchar *s = N_("Number of seconds before timeout for a connecting download");
gchar *s = N_("Number of seconds before timeout for a 'push sent' download");
gchar *s = N_("Number of seconds before timeout for a connected download");
gchar *s = N_("Downloading from multiple sources (swarming)");
gchar *s = N_("Enable s_warming");
gchar *s = N_("A_ggressive mode");
gchar *s = N_("M_inimum chunk size");
gchar *s = N_("Ma_ximum chunk size");
gchar *s = N_("bytes");
gchar *s = N_("bytes");
gchar *s = N_("Write buffer size");
gchar *s = N_("bytes");
gchar *s = N_("Strict SHA_1 matching");
gchar *s = N_("Watch hits for _alternate sources");
gchar *s = N_("_Feed mesh from hits");
gchar *s = N_("Downloads");
gchar *s = N_("_Path(s) to files");
gchar *s = N_("_Add directory");
gchar *s = N_("_Rescan");
gchar *s = N_("Files scanned");
gchar *s = N_("Ignore symbolically linked _directories");
gchar *s = N_("Ignore symbolically linked regular _files");
gchar *s = N_("Search _extensions");
gchar *s = N_("Miscellaneous");
gchar *s = N_("Enable \"_Browse Host\" feature");
gchar *s = N_("E_xpose relative paths");
gchar *s = N_("Timeouts (all values in seconds)");
gchar *s = N_("Connectin_g timeout");
gchar *s = N_("Connected time_out");
gchar *s = N_("Partial File Sharing");
gchar *s = N_("First chunk _size");
gchar *s = N_("Enable upload of _partially downloaded files");
gchar *s = N_("Minimum file size");
gchar *s = N_("Queuing details");
gchar *s = N_("Minimum upload time");
gchar *s = N_("Minimum chunk size");
gchar *s = N_("Use realistic PARQ estimates");
gchar *s = N_("Statistics:");
gchar *s = N_("Library scanning:");
gchar *s = N_("Last scan initiated on:");
gchar *s = N_("File scanning time:");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("Query Routing Protocol:");
gchar *s = N_("Indexing started on:");
gchar *s = N_("and lasted");
gchar *s = N_("Table generation started on:");
gchar *s = N_("and lasted");
gchar *s = N_("Patch generation started on:");
gchar *s = N_("and lasted");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("Query routing table information:");
gchar *s = N_("Keywords:");
gchar *s = N_("Slots:");
gchar *s = N_("Filled slots:");
gchar *s = N_("Generation:");
gchar *s = N_("Filled ratio:");
gchar *s = N_("Conflict ratio:");
gchar *s = N_("%");
gchar *s = N_("%");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("Query routing patch information:");
gchar *s = N_("Raw length:");
gchar *s = N_("Compressed length:");
gchar *s = N_("Compression ratio:");
gchar *s = N_("%");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("[place holder]");
gchar *s = N_("Uploads");
gchar *s = N_("Miscellaneous");
gchar *s = N_("Show _confirmation dialog when leaving gtk-gnutella");
gchar *s = N_("Show _tooltips (does not affect all tooltips yet)");
gchar *s = N_("Show _metric units");
gchar *s = N_("Jump to newly created searches");
gchar *s = N_("Toolbar style");
gchar *s = N_("Update search results pane every");
gchar *s = N_("seconds");
gchar *s = N_("seconds");
gchar *s = N_("Try to keep 'dead' entries around for");
gchar *s = N_("Expert mode");
gchar *s = N_("Show additional information and settings for advanced and _expert users");
gchar *s = N_("GnutellaNet display");
gchar *s = N_("Display detailed traffic information");
gchar *s = N_("Detailed traffic information to display");
gchar *s = N_("TX compression");
gchar *s = N_("RX compression");
gchar *s = N_("TX speed");
gchar *s = N_("RX speed");
gchar *s = N_("TX queries");
gchar *s = N_("RX queries");
gchar *s = N_("TX query hits");
gchar *s = N_("RX query hits");
gchar *s = N_("Generated queries");
gchar *s = N_("Pending local queries");
gchar *s = N_("TX dropped");
gchar *s = N_("RX dropped");
gchar *s = N_("QRP stats");
gchar *s = N_("Dup / Bad / Weird");
gchar *s = N_("Ping / Pong round trip");
gchar *s = N_("Library size");
gchar *s = N_("Library # of files");
gchar *s = N_("RX wire bytes");
gchar *s = N_("TX wire bytes");
gchar *s = N_("User Interface");
gchar *s = N_("Property browser");
gchar *s = N_("Property pattern:");
gchar *s = N_("Saved");
gchar *s = N_("Type");
gchar *s = N_("Property");
gchar *s = N_("Value");
gchar *s = N_("Selected property:");
gchar *s = N_("<no property selected>");
gchar *s = N_("Min/Max:");
gchar *s = N_("<no property selected>");
gchar *s = N_("Default value:");
gchar *s = N_("<no property selected>");
gchar *s = N_("Edit value:");
gchar *s = N_("<no property selected>");
gchar *s = N_("Diverse properties");
gchar *s = N_("Avg. time between IP address changes:");
gchar *s = N_("Avg. uptime of this servent:");
gchar *s = N_("Available physical memory:");
gchar *s = N_("Debugging");
gchar *s = N_("_Quit");
gchar *s = N_("_Edit filters");
gchar *s = N_("_Edit filters");
gchar *s = N_("_Stop this search");
gchar *s = N_("Resu_me this search");
gchar *s = N_("_Restart this search");
gchar *s = N_("_Duplicate this search");
gchar *s = N_("Close this search");
gchar *s = N_("Browse host");
gchar *s = N_("Connect to host");
gchar *s = N_("Copy URL to clipboard");
gchar *s = N_("Force push mode");
gchar *s = N_("Configure columns");
